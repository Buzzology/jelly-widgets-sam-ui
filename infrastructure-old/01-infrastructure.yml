AWSTemplateFormatVersion: 2010-09-09

# Look into this for putting cloudfront in front: https://github.com/aws-samples/amazon-cloudfront-secure-static-site/tree/master/templates
# ^ uses this guide: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/getting-started-secure-static-website-cloudformation-template.html


# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-s3.html
# Create stack: `aws cloudformation create-stack --stack-name testerwidgets-ui-prod --on-failure DELETE testerwidgets-ui-prod --template-body file://./infrastructure/01-infrastructure.yml --parameters file://./infrastructure/01-infrastructure-parameters.json`
# Update stack: `aws cloudformation update-stack --stack-name testerwidgets-ui-prod --template-body file://./infrastructure/01-infrastructure.yml --parameters file://./infrastructure/01-infrastructure-parameters.json`.
Parameters:
  RootDomainName:
    Description: Domain name for the website (example.com)
    Type: String
  HostedZoneID:
    Description: This is the region HostedZoneID, NOT the route53 zone ID. Lookup the mappings here https://docs.aws.amazon.com/general/latest/gr/s3.html
    Type: String
  S3AliasTarget:
    Description: This is the s3 target alias. Lookup mappings here https://docs.aws.amazon.com/general/latest/gr/s3.html
    Type: String
  BaseApiUrl:
    Description: This is the base api url that the react app should contact for payloads etc.
    Type: String

Resources:
  RootBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref RootDomainName
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html

  # Allow read access to the bucket.
  BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref RootBucket
                - /*
      Bucket: !Ref RootBucket

  # Redirect your www bucket to the root one.
  WWWBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub
          - www.${Domain}
          - Domain: !Ref RootDomainName
      AccessControl: BucketOwnerFullControl
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: !Ref RootBucket
  DNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub 
          - ${Domain}.
          - Domain: !Ref RootDomainName
      Comment: Zone apex alias.
      RecordSets:
      - 
        Name: !Ref RootDomainName
        Type: A
        AliasTarget:
          HostedZoneId: !Ref HostedZoneID
          DNSName: !Ref S3AliasTarget
      -
        Name: !Sub
            - www.${Domain}
            - Domain: !Ref RootDomainName
        Type: CNAME
        TTL: 900
        ResourceRecords:
        - !GetAtt WWWBucket.DomainName

  # Create a parameter 
  ParameterBaseApiUrl:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: Base API Url for the React App
      Name: /testerwidgets/ui/prod/base-api-url
      Type: String
      Value: !Ref BaseApiUrl

Outputs:
  WebsiteURL:
    Value: !GetAtt RootBucket.WebsiteURL
    Description: URL for website hosted on S3

