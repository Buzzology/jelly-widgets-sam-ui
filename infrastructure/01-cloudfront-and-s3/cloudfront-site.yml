# 
# Create stack: `aws cloudformation create-stack --stack-name acm-certificate-00 --region us-east-1 --on-failure DELETE --template-body file://./main.yml --parameters file://./parameters.json --capabilities CAPABILITY_AUTO_EXPAND`

AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFront with Header Security and site content
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  CertificateArn:
    Description: The arn of the certificate to be used. See 00-acm-certificate
    Type: String
  DomainName:
    Description: Apex domain
    Type: String
  SubDomain:
    Description: Subdomain
    Type: String
  S3BucketRoot:
    Description: Content Bucket
    Type: String
  S3BucketRootName:
    Description: Content Bucket
    Type: String
  S3BucketRootArn:
    Description: Content Bucket locator
    Type: String
  S3BucketWww:
    Description: Content Bucket
    Type: String
  S3BucketWwwName:
    Description: Content Bucket
    Type: String
  S3BucketWwwArn:
    Description: Content Bucket locator
    Type: String
  CreateApex: 
    Type: String

Conditions:
  CreateApexConfig:  !Equals
    - !Ref CreateApex
    - 'yes'

Resources:
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref 'S3BucketRoot'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub '${S3BucketRootArn}/*'
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

  # This is the main cloudfront distribution for the naked domain.
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
        DefaultCacheBehavior:
          Compress: true
          DefaultTTL: 86400
          ForwardedValues:
            QueryString: true
          MaxTTL: 31536000
          TargetOriginId: !Sub 'S3-${AWS::StackName}-root'
          ViewerProtocolPolicy: 'redirect-to-https'
        CustomErrorResponses:
          - ErrorCachingMinTTL: 60
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: '/index.html'
          - ErrorCachingMinTTL: 60
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: '/index.html'
        Enabled: true
        HttpVersion: 'http2'
        DefaultRootObject: 'index.html'
        IPV6Enabled: true
        Origins:
          - DomainName: !Ref S3BucketRootName
            Id: !Sub 'S3-${AWS::StackName}-root'
            S3OriginConfig:
              OriginAccessIdentity:
                !Join ['', ['origin-access-identity/cloudfront/', !Ref CloudFrontOriginAccessIdentity]]
        PriceClass: 'PriceClass_All'
        ViewerCertificate:
          AcmCertificateArn: !Ref 'CertificateArn'
          MinimumProtocolVersion: 'TLSv1.1_2016'
          SslSupportMethod: 'sni-only'

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'CloudFront OAI for ${DomainName}'

  # Setup a dns entry for the apex/naked domain in Route53.
  ApexRoute53RecordSetGroup:
    Condition: CreateApexConfig
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub '${DomainName}.'
      RecordSets:
      - Name: !Ref 'DomainName'
        Type: 'A'
        AliasTarget:
          DNSName: !GetAtt 'CloudFrontDistribution.DomainName'
          EvaluateTargetHealth: false
          # The  following HosteZoneId is always used for alias records pointing to CF.
          HostedZoneId: 'Z2FDTNDATAQYW2'

  # This is the www cloudfront instance, we just use it to redirect to the naked one. 
  # https://gist.github.com/mikebroberts/09e8c8b4aaac6e26149c4622fd492414
  RedirectCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Sub '${SubDomain}.${DomainName}'
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: redirectOrigin
          ViewerProtocolPolicy: 'redirect-to-https'
          # "Managed-CachingDisabled" from https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt RedirectFunction.FunctionMetadata.FunctionARN
        # CloudFront requires at least one origin, even though we're always going to redirect
        Origins:
          - DomainName: !Ref S3BucketWwwName
            Id: redirectOrigin
            S3OriginConfig:
              OriginAccessIdentity:
                !Join ['', ['origin-access-identity/cloudfront/', !Ref CloudFrontOriginAccessIdentityWww]]
        ViewerCertificate:
          AcmCertificateArn: !Ref 'CertificateArn'
          MinimumProtocolVersion: 'TLSv1.1_2016'
          SslSupportMethod: 'sni-only'

  CloudFrontOriginAccessIdentityWww:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'CloudFront OAI for ${SubDomain}.${DomainName}'
              
  # Used by the www cloudfront instance in order to redirect to naked domain.
  RedirectFunction:
    Type: AWS::CloudFront::Function
    Properties:
      AutoPublish: true
      FunctionCode: !Sub |
        function handler(event) {
          return {
            statusCode: 302,
            statusDescription: 'Found',
            headers: {
              location: { value: 'https://${DomainName}/' }
            }
          }
        }
      FunctionConfig:
        Comment: !Sub 'Redirect from ${SubDomain}.${DomainName} to ${DomainName}'
        Runtime: cloudfront-js-1.0
      Name: !Sub "${AWS::StackName}-redirectFun"

  # Setup the sub-domain (www) to point to the redirect cloudfront distro.
  Route53RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub '${DomainName}.'
      RecordSets:
      - Name: !Sub '${SubDomain}.${DomainName}'
        Type: 'A'
        AliasTarget:
          DNSName: !GetAtt 'RedirectCloudFrontDistribution.DomainName'
          EvaluateTargetHealth: false
          # The following HosteZoneId is always used for alias records pointing to CF.
          HostedZoneId: 'Z2FDTNDATAQYW2'

Outputs:
  CloudFrontDistribution:
    Description: CloudFront distribution
    Value: !GetAtt CloudFrontDistribution.DomainName

  CloudFrontDomainName:
    Description: Website address
    Value: !Sub '${SubDomain}.${DomainName}'